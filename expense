#! /usr/bin/env ruby

require "pg"
require "date"


HELP = <<~DEFAULT_HELP_MSG
  An expense recording system

  Commands:

  add AMOUNT MEMO [DATE] - record a new expense
  clear - delete all expenses
  list - list all expenses
  delete NUMBER - remove expense with id NUMBER
  search QUERY - list expenses with a matching memo field
  DEFAULT_HELP_MSG

# ARGV - an array of arguments as strings that have been passed to the command line program

def list
  expenses = PG.connect(dbname: "expenses")

  result = expenses.exec("SELECT * FROM expenses ORDER BY created_on;")

  result.each do |tuple|
    columns = [ tuple["id"].rjust(3),
                tuple["created_on"].rjust(10),
                tuple["amount"].rjust(10),
                tuple["memo"]
              ]
    puts columns.join(" | ")
  end
end

def help
  puts HELP
end

def add(amount, memo, date = nil)
  expenses = PG.connect(dbname: "expenses")

  if date
    expenses.exec_params("INSERT INTO expenses (amount, memo, date) VALUES ($1, $2, $3);", [amount, memo, date])
  else
    expenses.exec_params("INSERT INTO expenses (amount, memo) VALUES ($1, $2);", [amount, memo])
  end
end

def valid_amount?(amount)
  amount.to_f.to_s == amount &&
  amount.to_f >= 0 &&
  amount.to_f < 100_000
end

def valid_date?(date)
  return false unless date.match?(/[0-9]{4}-[0-9]{2}-[0-9]{2}/) 
  year, month, day = date.split('-')
  Date.valid_date?(year, month, day)
end

def error_for_add
  error = nil
  error = if ARGV.size < 3
            "You must provide an amount and a memo" 
          elsif !valid_amount?(ARGV[1])
            "Invalid amount"
          elsif ARGV.size == 4 && !valid_date?(ARGV[3])
            "Invalid date"
          elsif ARGV.size > 4
            "That's too many arguments"
          end
  error
end

case ARGV.first
when "list" then list
when "add"
  error = error_for_add
  if error
    puts error
  elsif ARGV.size == 3
    add(ARGV[1], ARGV[2])
  elsif ARGV.size == 4
    add(ARGV[1], ARGV[2], ARGV[3])
  end
else help
end