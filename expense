#! /usr/bin/env ruby

require "pg"
require "date"

class CLI
  def initialize(arguments)
    @command = arguments.shift
    @arguments = arguments
    @application = ExpenseData.new
  end

  def run
    case command
    when "list" then application.list
    when "add"
      error = error_for_add
      if error
        puts error
      elsif arguments.size == 2
        application.add(arguments[0], arguments[1])
      elsif arguments.size == 4
        application.add(arguments[0], arguments[1], arguments[2])
      end
    else application.help
    end
  end

  private

  attr_reader :command, :arguments, :application

  def valid_amount?
    amount = arguments[0]
    amount.to_f.to_s == amount &&
    amount.to_f >= 0 &&
    amount.to_f < 100_000
  end

  def valid_date?
    date = arguments[2]
    return false unless date.match?(/[0-9]{4}-[0-9]{2}-[0-9]{2}/) 
    year, month, day = date.split('-')
    Date.valid_date?(year, month, day)
  end

  def error_for_add
    error = nil
    error = if arguments.size < 2
              "You must provide an amount and a memo" 
            elsif !valid_amount?
              "Invalid amount"
            elsif arguments.size == 3 && !valid_date?
              "Invalid date"
            elsif arguments.size > 3
              "That's too many arguments"
            end
    error
  end
end

class ExpenseData

  def initialize
    @expenses = PG.connect(dbname: "expenses")
  end

  def list
    result = @expenses.exec("SELECT * FROM expenses ORDER BY created_on;")

    result.each do |tuple|
      columns = [ tuple["id"].rjust(3),
                  tuple["created_on"].rjust(10),
                  tuple["amount"].rjust(10),
                  tuple["memo"]
                ]
      puts columns.join(" | ")
    end
  end

  def help
    puts <<~DEFAULT_HELP_MSG
    An expense recording system

    Commands:

    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
    DEFAULT_HELP_MSG
  end

  def add(amount, memo, date = Date.today)
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3);"
    @expenses.exec_params(sql, [amount, memo, date])
  end
end

CLI.new(ARGV).run
