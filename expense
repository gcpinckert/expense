#! /usr/bin/env ruby

require "pg"
require "date"
require "io/console"

class CLI
  def initialize(arguments)
    @command = arguments.shift
    @arguments = arguments
    @application = ExpenseData.new
  end

  def run
    case command
    when "list" then application.list
    when "add"
      error = error_for_add
      if error
        puts error
      elsif arguments.size == 2
        application.add(arguments[0], arguments[1])
      elsif arguments.size == 4
        application.add(arguments[0], arguments[1], arguments[2])
      end
    when "search"
      if arguments.empty?
        puts "Please provide a search term"
      else
        application.search(arguments.first)
      end
    when "delete"
      if arguments.empty? || !valid_id?
        puts "Please provide an id number for the expense to delete"
      else
        application.delete(arguments.first)
      end
    when "clear"
      application.delete_all_expenses if confirmed?
    else application.help
    end
  end

  private

  attr_reader :command, :arguments, :application

  def valid_id?
    arguments[0].to_i.to_s == arguments[0] &&
    arguments[0].to_i > 0
  end

  def valid_amount?
    amount = arguments[0]
    amount.to_f.to_s == amount &&
    amount.to_f >= 0 &&
    amount.to_f < 100_000
  end

  def valid_date?
    date = arguments[2]
    return false unless date.match?(/[0-9]{4}-[0-9]{2}-[0-9]{2}/) 
    year, month, day = date.split('-')
    Date.valid_date?(year, month, day)
  end

  def error_for_add
    error = nil
    error = if arguments.size < 2
              "You must provide an amount and a memo" 
            elsif !valid_amount?
              "Invalid amount"
            elsif arguments.size == 3 && !valid_date?
              "Invalid date"
            elsif arguments.size > 3
              "That's too many arguments"
            end
    error
  end

  def confirmed?
    puts "This will remove all expenses. Are you sure? (y/n)"
    answer = $stdin.getch
    answer == 'y'
  end
end

class ExpenseData

  def initialize
    @expenses = PG.connect(dbname: "expenses")
    setup_schema
  end

  def list
    result = @expenses.exec("SELECT * FROM expenses ORDER BY created_on;")
    display_count(result)
    display_result(result) unless empty?(result)
  end

  def help
    puts <<~DEFAULT_HELP_MSG
    An expense recording system

    Commands:

    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
    DEFAULT_HELP_MSG
  end

  def add(amount, memo, date = Date.today)
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3);"
    @expenses.exec_params(sql, [amount, memo, date])
  end

  def search(search_terms)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1 ORDER BY created_on;"
    result = @expenses.exec_params(sql, ["%#{search_terms}%"])
    display_count(result)
    display_result(result) unless empty?(result)
  end

  def delete(id_number)
    sql = "SELECT * FROM expenses WHERE id = $1;"
    result = @expenses.exec_params(sql, [id_number])
    if empty?(result)
      puts "There is no expense with the id '#{id_number}'."
    else
      sql = "DELETE FROM expenses WHERE id = $1;"
      @expenses.exec_params(sql, [id_number])
      puts "The following expense had been deleted:"
      display_result(result)
    end
  end

  def delete_all_expenses
    @expenses.exec("DELETE FROM expenses;")
    puts "All expenses have been deleted."
  end

  private

  def setup_schema
    return if table_exists?
    schema = File.read("./schema.sql")
    @expenses.exec(schema)
  end

  def table_exists?
    sql = "SELECT COUNT(*) FROM information_schema.tables" \
          " WHERE table_schema = 'public' AND table_name = 'expenses';"
    @expenses.exec(sql).values.flatten.join == '1'
  end

  def empty?(result)
    result.ntuples <= 0
  end

  def display_count(result)
    count = result.ntuples
    if count > 0
      puts "There are #{count} expenses."
    else
      puts "There are no expenses."
    end
  end

  def display_result(result)
    width = 0
    total = 0
    result.each do |tuple|
      columns = [ tuple["id"].rjust(3),
                  tuple["created_on"].rjust(10),
                  tuple["amount"].rjust(10),
                  tuple["memo"]
                ]
      total += tuple["amount"].to_f
      row = columns.join(" | ")
      width = row.size if row.size > width
      puts row
    end

    puts "-" * width
    puts "#{'Total'.ljust(19)}#{total.to_s.rjust(10)}"
  end
end

CLI.new(ARGV).run
